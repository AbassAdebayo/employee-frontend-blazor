@page "/edit-employee/{id:guid}"
@inject NavigationManager _navigationManager
@inject EmployeeService _employeeService;
@using Blazored.Toast.Services



<!-- Add your edit page content here -->
@* <h3>Edit Employee</h3>
<EditForm Model="selectedEmployee" OnValidSubmit="UpdateEmployeeAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="firstName">First Name:</label>
        <InputText id="firstName" class="form-control" @bind-Value="selectedEmployee.FirstName" />
    </div>

    <div class="form-group">
        <label for="lastName">Last Name:</label>
        <InputText id="lastName" class="form-control" @bind-Value="selectedEmployee.LastName" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="selectedEmployee.Email" />
    </div>

    <div class="form-group">
        <label for="address">Address:</label>
        <InputText id="address" class="form-control" @bind-Value="selectedEmployee.Address" />
    </div>

    <div class="form-group">
        <label for="phoneNumber">Phone Number:</label>
        <InputText id="phoneNumber" class="form-control" @bind-Value="selectedEmployee.PhoneNumber" />
    </div>

    <div class="form-group">
        <label for="gender">Gender:</label>
        <select id="gender" class="form-control" @bind="selectedEmployee.Gender">
            <option value="M">M</option>
            <option value="F">F</option>
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Save Changes</button>
    <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
</EditForm> *@

<h3>Edit Employee</h3>
@if (selectedEmployee != null)
{
    <EditForm Model="updateModel" OnValidSubmit="UpdateEmployeeAsync">
        <DataAnnotationsValidator />

        <!-- Add input fields for employee properties -->
        <div class="form-group">
            <label for="FirstName">First Name:</label>
            <InputText id="FirstName" class="form-control" @bind-Value="updateModel.FirstName" />
            <ValidationMessage For="@(() => updateModel.FirstName)" />
        </div>

        <div class="form-group">
            <label for="LastName">Last Name:</label>
            <InputText id="LastName" class="form-control" @bind-Value="updateModel.LastName" />
            <ValidationMessage For="@(() => updateModel.LastName)" />
        </div>

        <div class="form-group">
        <label for="Email">Email:</label>
        <InputText id="Email" class="form-control" @bind-Value="updateModel.Email" />
        <ValidationMessage For="@(() => updateModel.Email)" />
    </div>

    <div class="form-group">
        <label for="Address">Address:</label>
        <InputText id="Address" class="form-control" @bind-Value="updateModel.Address" />
        <ValidationMessage For="@(() => updateModel.Address)" />
    </div>

    <div class="form-group">
        <label for="PhoneNumber">Phone Number:</label>
        <InputText id="PhoneNumber" class="form-control" @bind-Value="updateModel.PhoneNumber" />
        <ValidationMessage For="@(() => updateModel.PhoneNumber)" />
    </div>

    <div class="form-group">
        <label for="Gender">Gender:</label>
        <select id="Gender" class="form-control" @bind="updateModel.Gender">
            <option value="M">M</option>
            <option value="F">F</option>
        </select>
    </div>

        <!-- Add other input fields for employee properties -->

        <button type="submit" class="btn btn-primary">Update</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelUpdate">Cancel</button>
    </EditForm>
}
else
{
    <p>Loading employee data...</p>
}

@code {

    private EmployeeModel selectedEmployee;
    private UpdateEmployeeRequestModel updateModel = new UpdateEmployeeRequestModel();

    [Parameter]
    public Guid Id { get; set; }

    [Inject]
    private IToastService toastService { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        // Fetch the employee data from the service
        selectedEmployee = await _employeeService.GetEmployeeByIdAsync(Id);

        // Map the properties from the selectedEmployee to the update model
        updateModel.FirstName = selectedEmployee.FirstName;
        updateModel.LastName = selectedEmployee.LastName;
        updateModel.PhoneNumber = selectedEmployee.PhoneNumber;
        updateModel.Address = selectedEmployee.Address;
        updateModel.Email = selectedEmployee.Email;
        updateModel.Gender = selectedEmployee.Gender;
    }

     private async Task UpdateEmployeeAsync()
    {
        
        // Map the properties from the update model back to the employee
        selectedEmployee.FirstName = updateModel.FirstName;
        selectedEmployee.LastName = updateModel.LastName;
        selectedEmployee.PhoneNumber = updateModel.PhoneNumber;
        selectedEmployee.Address = updateModel.Address;
        selectedEmployee.Email = updateModel.Email;
        selectedEmployee.Gender = updateModel.Gender;
        selectedEmployee.UpdatedAt = DateTime.UtcNow;
        
        await _employeeService.UpdateEmployeeAsync(Id, updateModel);;

        await Task.Delay(3000); // 3 seconds
        // After successful creation, redirect to GetAllEmployees page.
        _navigationManager.NavigateTo("/employees");
    }

    private void CancelUpdate()
    {
        // Clear the selectedEmployee to exit the edit mode
        selectedEmployee = null;
        _navigationManager.NavigateTo("/employees");
    }

}
